{"version":3,"file":"contacts-oca.mjs","sources":["../src/views/ReadOnlyContactDetails.vue","../src/oca/mountContactDetails.js","../src/oca.js"],"sourcesContent":["<!--\n  - SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n\n<template>\n\t<div class=\"display-contact-details\">\n\t\t<div v-if=\"loading\" class=\"recipient-details-loading\">\n\t\t\t<NcLoadingIcon />\n\t\t</div>\n\t\t<!-- nothing selected or contact not found -->\n\t\t<NcEmptyContent v-else-if=\"!contact\"\n\t\t\tclass=\"empty-content\"\n\t\t\t:name=\"t('mail', 'No data for this contact')\"\n\t\t\t:description=\"t('mail', 'No data for this contact on their profile')\">\n\t\t\t<template #icon>\n\t\t\t\t<IconContact :size=\"20\" />\n\t\t\t</template>\n\t\t</NcEmptyContent>\n\t\t<div v-else\n\t\t\tclass=\"recipient-details-content\">\n\t\t\t<div class=\"contact-title\">\n\t\t\t\t<h6>{{ contact.fullName }}</h6>\n\t\t\t\t<!-- Subtitle -->\n\t\t\t\t<span v-html=\"formattedSubtitle\" />\n\t\t\t</div>\n\t\t\t<div class=\"contact-details-wrapper\">\n\t\t\t\t<div v-for=\"(properties, name) in groupedProperties\"\n\t\t\t\t\t:key=\"name\">\n\t\t\t\t\t<ContactDetailsProperty v-for=\"(property, index) in properties\"\n\t\t\t\t\t\t:key=\"`${index}-${contact.key}-${property.name}`\"\n\t\t\t\t\t\t:is-first-property=\"index === 0\"\n\t\t\t\t\t\t:is-last-property=\"index === properties.length - 1\"\n\t\t\t\t\t\t:property=\"property\"\n\t\t\t\t\t\t:contact=\"contact\"\n\t\t\t\t\t\t:local-contact=\"localContact\"\n\t\t\t\t\t\t:contacts=\"[contact]\"\n\t\t\t\t\t\t:is-read-only=\"true\"\n\t\t\t\t\t\t:bus=\"bus\" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\nimport { isMobile, NcEmptyContent, NcLoadingIcon } from '@nextcloud/vue'\nimport IconContact from 'vue-material-design-icons/AccountMultiple.vue'\nimport mitt from 'mitt'\nimport { namespaces as NS } from '@nextcloud/cdav-library'\nimport { loadState } from '@nextcloud/initial-state'\nimport ContactDetailsProperty from '../components/ContactDetails/ContactDetailsProperty.vue'\nimport Contact from '../models/contact.js'\nimport rfcProps from '../models/rfcProps.js'\nimport validate from '../services/validate.js'\nimport client from '../services/cdav.js'\nimport usePrincipalsStore from '../store/principals.js'\n\nconst { profileEnabled } = loadState('user_status', 'profileEnabled', false)\n\nexport default {\n\tname: 'ReadOnlyContactDetails',\n\n\tcomponents: {\n\t\tContactDetailsProperty,\n\t\tNcEmptyContent,\n\t\tIconContact,\n\t\tNcLoadingIcon,\n\t},\n\n\tmixins: [isMobile],\n\n\tprops: {\n\t\tcontactEmailAddress: {\n\t\t\ttype: String,\n\t\t\trequired: true,\n\t\t},\n\t\tdesc: {\n\t\t\ttype: String,\n\t\t\trequired: false,\n\t\t\tdefault: '',\n\t\t},\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tcontactDetailsSelector: '.contact-details',\n\t\t\texcludeFromBirthdayKey: 'x-nc-exclude-from-birthday-calendar',\n\n\t\t\tbus: mitt(),\n\t\t\tshowMenuPopover: false,\n\t\t\tprofileEnabled,\n\t\t\tcontact: undefined,\n\t\t\tlocalContact: undefined,\n\t\t\tloading: true,\n\t\t}\n\t},\n\n\tcomputed: {\n\t\t/**\n\t\t * Read-only representation of the contact title and organization.\n\t\t *\n\t\t * @return {string}\n\t\t */\n\t\tformattedSubtitle() {\n\t\t\tconst title = this.contact.title\n\t\t\tconst organization = this.contact.org\n\n\t\t\tif (title && organization) {\n\t\t\t\treturn t('contacts', '{title} at {organization}', {\n\t\t\t\t\ttitle,\n\t\t\t\t\torganization,\n\t\t\t\t})\n\t\t\t} else if (title) {\n\t\t\t\treturn title\n\t\t\t} else if (organization) {\n\t\t\t\treturn organization\n\t\t\t}\n\n\t\t\treturn ''\n\t\t},\n\t\taddressbooks() {\n\t\t\treturn this.$store.getters.getAddressbooks\n\t\t},\n\t\t/**\n\t\t * Contact properties copied and sorted by rfcProps.fieldOrder\n\t\t *\n\t\t * @return {Array}\n\t\t */\n\t\tsortedProperties() {\n\t\t\tif (!this.localContact || !this.localContact.properties) {\n\t\t\t\treturn []\n\t\t\t}\n\t\t\treturn this.localContact.properties\n\t\t\t\t.toSorted((a, b) => {\n\t\t\t\t\tconst nameA = a.name.split('.').pop()\n\t\t\t\t\tconst nameB = b.name.split('.').pop()\n\t\t\t\t\treturn rfcProps.fieldOrder.indexOf(nameA) - rfcProps.fieldOrder.indexOf(nameB)\n\t\t\t\t})\n\t\t},\n\n\t\t/**\n\t\t * Contact properties filtered and grouped by rfcProps.fieldOrder\n\t\t *\n\t\t * @return {object}\n\t\t */\n\t\tgroupedProperties() {\n\t\t\tif (!this.sortedProperties) {\n\t\t\t\treturn {}\n\t\t\t}\n\t\t\treturn this.sortedProperties.reduce((list, property) => {\n\t\t\t\tif (!this.canDisplay(property)) {\n\t\t\t\t\treturn list\n\t\t\t\t}\n\t\t\t\tif (!list[property.name]) {\n\t\t\t\t\tlist[property.name] = []\n\t\t\t\t}\n\t\t\t\tlist[property.name].push(property)\n\t\t\t\treturn list\n\t\t\t}, {})\n\t\t},\n\t\t/**\n\t\t * The address book is read-only (e.g. shared with me).\n\t\t *\n\t\t * @return {boolean}\n\t\t */\n\t\taddressbookIsReadOnly() {\n\t\t\treturn this.contact.addressbook?.readOnly\n\t\t},\n\t\t/**\n\t\t * Usable addressbook object linked to the local contact\n\t\t *\n\t\t * @return {string}\n\t\t */\n\t\taddressbook() {\n\t\t\treturn this.contact.addressbook.id\n\t\t},\n\n\t\t/**\n\t\t * Fake model to use the propertyGroups component\n\t\t *\n\t\t * @return {object}\n\t\t */\n\t\tgroupsModel() {\n\t\t\treturn {\n\t\t\t\treadableName: t('mail', 'Contact groups'),\n\t\t\t\ticon: 'icon-contacts-dark',\n\t\t\t}\n\t\t},\n\t},\n\twatch: {\n\t\tcontact: {\n\t\t\thandler(contact) {\n\t\t\t\tthis.updateLocalContact(contact)\n\t\t\t},\n\t\t\timmediate: true,\n\t\t},\n\t},\n\tasync beforeMount() {\n\t\t// Init client and stores\n\t\tawait client.connect({ enableCardDAV: true })\n\t\tconst principalsStore = usePrincipalsStore()\n\t\tprincipalsStore.setCurrentUserPrincipal(client)\n\t\tawait this.$store.dispatch('getAddressbooks')\n\n\t\t// Fetch contact\n\t\tawait this.fetchContact()\n\t},\n\tmethods: {\n\t\tasync fetchContact() {\n\t\t\ttry {\n\t\t\t\tconst email = this.contactEmailAddress\n\t\t\t\tconst result = await Promise.all(\n\t\t\t\t\tthis.addressbooks.map(async (addressBook) => [\n\t\t\t\t\t\taddressBook.dav,\n\t\t\t\t\t\tawait addressBook.dav.addressbookQuery([\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: [NS.IETF_CARDDAV, 'prop-filter'],\n\t\t\t\t\t\t\t\tattributes: [['name', 'EMAIL']],\n\t\t\t\t\t\t\t\tchildren: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: [NS.IETF_CARDDAV, 'text-match'],\n\t\t\t\t\t\t\t\t\t\tvalue: email,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t]),\n\t\t\t\t\t]),\n\t\t\t\t)\n\n\t\t\t\tconst contacts = result.flatMap(([addressBook, vcards]) =>\n\t\t\t\t\tvcards.map((vcard) => new Contact(vcard.data, addressBook)),\n\t\t\t\t)\n\n\t\t\t\tthis.contact = contacts.find((contact) => contact.email === email)\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Error fetching contact:', error)\n\t\t\t} finally {\n\t\t\t\tthis.loading = false\n\t\t\t}\n\t\t},\n\t\tupdateGroups(value) {\n\t\t\tthis.newGroupsValue = value\n\t\t},\n\t\t/**\n\t\t *  Update this.localContact\n\t\t *\n\t\t * @param {Contact} contact the contact to clone\n\t\t */\n\t\tasync updateLocalContact(contact) {\n\t\t\tif (!contact) {\n\t\t\t\tthis.localContact = undefined\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// create empty contact and copy inner data\n\t\t\tconst localContact = Object.assign(\n\t\t\t\tObject.create(Object.getPrototypeOf(contact)),\n\t\t\t\tcontact,\n\t\t\t)\n\t\t\tvalidate(localContact)\n\n\t\t\tthis.localContact = localContact\n\t\t\tthis.newGroupsValue = [...this.localContact.groups]\n\t\t},\n\t\t/**\n\t\t * Should display the property\n\t\t *\n\t\t * @param {Property} property the property to check\n\t\t * @return {boolean}\n\t\t */\n\t\tcanDisplay(property) {\n\t\t\t// Make sure we have some model for the property and check for ITEM.PROP custom label format\n\t\t\tconst propModel = rfcProps.properties[property.name.split('.').pop()]\n\n\t\t\tconst propType = propModel && propModel.force\n\t\t\t\t? propModel.force\n\t\t\t\t: property.getDefaultType()\n\n\t\t\treturn propModel && propType !== 'unknown'\n\t\t},\n\n\t},\n}\n</script>\n\n<style lang=\"scss\" scoped>\n\n.empty-content {\n\theight: 100%;\n}\n\n.contact-title {\n\tmargin-left: 100px;\n\tmargin-top: 40px;\n}\n\n:deep(.property__value) {\n\tfont-size: medium !important;\n}\n\n.recipient-details-loading {\n\tmargin-top: 64px;\n}\n</style>\n","/**\n * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport Vue from 'vue'\nimport ReadOnlyContactDetails from '../views/ReadOnlyContactDetails.vue'\nimport { createPinia, PiniaVuePlugin } from 'pinia'\n\n/** GLOBAL COMPONENTS AND DIRECTIVE */\nimport ClickOutside from 'vue-click-outside'\nimport { Tooltip as VTooltip } from '@nextcloud/vue'\n\nimport store from '../store/index.js'\nimport logger from '../services/logger.js'\n\n/**\n * @param {HTMLElement} el\n * @param {string} contactEmailAddress\n * @return {Promise<object>}\n */\nexport function mountContactDetails(el, contactEmailAddress) {\n\tVue.use(PiniaVuePlugin)\n\tconst pinia = createPinia()\n\n\t// Register global directives\n\tVue.directive('ClickOutside', ClickOutside)\n\tVue.directive('Tooltip', VTooltip)\n\n\tVue.prototype.t = t\n\tVue.prototype.n = n\n\n\tVue.prototype.appName = appName\n\tVue.prototype.appVersion = appVersion\n\tVue.prototype.logger = logger\n\tVue.prototype.OC = window.OC\n\tVue.prototype.OCA = window.OCA\n\n\tconst Component = Vue.extend(ReadOnlyContactDetails)\n\tconst vueElement = new Component({\n\t\tpinia,\n\t\tstore,\n\t\tpropsData: {\n\t\t\tcontactEmailAddress,\n\t\t},\n\t}).$mount(el)\n\treturn vueElement\n}\n","/**\n * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\n// eslint-disable-next-line import/no-unresolved, n/no-missing-import\nimport 'vite/modulepreload-polyfill'\n\n// Global scss sheets\nimport './css/contacts.scss'\n\n// Dialogs css\nimport '@nextcloud/dialogs/style.css'\n\nimport { mountContactDetails } from './oca/mountContactDetails.js'\n\nwindow.OCA ??= {}\nwindow.OCA.Contacts = {\n\t/**\n\t * @param {HTMLElement} el Html element to mount the component at\n\t * @param {string} contactEmailAddress Email address of the contact whose details to display\n\t * @return {Promise<object>} Mounted Vue instance (vm)\n\t */\n\tasync mountContactDetails(el, contactEmailAddress) {\n\t\treturn mountContactDetails(el, contactEmailAddress)\n\t},\n}\n"],"names":["profileEnabled","loadState","_sfc_main","ContactDetailsProperty","NcEmptyContent","IconContact","NcLoadingIcon","isMobile","mitt","title","organization","b","nameA","nameB","rfcProps","list","property","contact","client","usePrincipalsStore","email","contacts","addressBook","NS","vcards","vcard","Contact","error","value","localContact","validate","propModel","propType","mountContactDetails","el","contactEmailAddress","Vue","PiniaVuePlugin","pinia","createPinia","ClickOutside","VTooltip","appName","appVersion","logger","Component","ReadOnlyContactDetails","store"],"mappings":"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"}