{"version":3,"file":"index-BQgRUePv.chunk.mjs","sources":["../node_modules/@nextcloud/paths/dist/index.mjs"],"sourcesContent":["function encodePath(path) {\n  if (!path) {\n    return path;\n  }\n  return path.split(\"/\").map(encodeURIComponent).join(\"/\");\n}\nfunction basename(path) {\n  return path.replace(/\\\\/g, \"/\").replace(/.*\\//, \"\");\n}\nfunction dirname(path) {\n  return path.replace(/\\\\/g, \"/\").replace(/\\/[^\\/]*$/, \"\");\n}\nfunction joinPaths(...args) {\n  if (arguments.length < 1) {\n    return \"\";\n  }\n  const nonEmptyArgs = args.filter((arg) => arg.length > 0);\n  if (nonEmptyArgs.length < 1) {\n    return \"\";\n  }\n  const lastArg = nonEmptyArgs[nonEmptyArgs.length - 1];\n  const leadingSlash = nonEmptyArgs[0].charAt(0) === \"/\";\n  const trailingSlash = lastArg.charAt(lastArg.length - 1) === \"/\";\n  const sections = nonEmptyArgs.reduce((acc, section) => acc.concat(section.split(\"/\")), []);\n  let first = !leadingSlash;\n  const path = sections.reduce((acc, section) => {\n    if (section === \"\") {\n      return acc;\n    }\n    if (first) {\n      first = false;\n      return acc + section;\n    }\n    return acc + \"/\" + section;\n  }, \"\");\n  if (trailingSlash) {\n    return path + \"/\";\n  }\n  return path;\n}\nfunction isSamePath(path1, path2) {\n  const pathSections1 = (path1 || \"\").split(\"/\").filter((p) => p !== \".\");\n  const pathSections2 = (path2 || \"\").split(\"/\").filter((p) => p !== \".\");\n  path1 = joinPaths.apply(void 0, pathSections1);\n  path2 = joinPaths.apply(void 0, pathSections2);\n  return path1 === path2;\n}\nexport {\n  basename,\n  dirname,\n  encodePath,\n  isSamePath,\n  joinPaths\n};\n"],"names":["encodePath","path"],"mappings":";AAAA,SAASA,EAAWC,EAAM,CACxB,OAAKA,GAGEA,EAAK,MAAM,GAAG,EAAE,IAAI,kBAAkB,EAAE,KAAK,GAAG,CACzD","x_google_ignoreList":[0]}